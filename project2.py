# -*- coding: utf-8 -*-
"""Project2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KDwdwRO-DYOiDyGPnl3XSXRqfABJNYWm
"""

import numpy as np   # Create Random Data Set

np.random.seed(0)
x = 1 + 2 * np.random.normal(0,1,1000)
y = x + 1.5 * (x**2) + 0.8 * (x**3) + np.random.normal(0,3,1000)

import matplotlib.pyplot as plt

plt.scatter (x,y,s=10)
plt.show()

from sklearn.model_selection import train_test_split     # Divide data set into 3 parts(Training,Validation & Testing)

x = x[:, np.newaxis]
y = y[:, np.newaxis]

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.2, random_state=1)

x_train, x_val, y_train, y_val = train_test_split (x_train, y_train, test_size = 0.25, random_state=1)

from sklearn.linear_model import LinearRegression   # Try to trian liner regression model it is not good

Lin_reg_1 = LinearRegression()
Lin_reg_1.fit(x_train,y_train)

print('Degree 1 trainig error: ', Lin_reg_1.score(x_train,y_train))
print('Degree 1 validation error: ', Lin_reg_1.score(x_val,y_val))

from sklearn.preprocessing import PolynomialFeatures   ## Train degree two polynomial & transform it into multiple liner regression

poly_reg = PolynomialFeatures(degree = 2)
x_poly2 = poly_reg.fit_transform(x_train)
Lin_reg_2 = LinearRegression()
Lin_reg_2.fit(x_poly2,y_train)

x_poly2_val2 = poly_reg.fit_transform(x_val)

print('Degree 2 trainig error: ', Lin_reg_2.score(x_poly2,y_train))
print('Degree 2 validation error: ', Lin_reg_2.score(x_poly2_val2,y_val))

poly_reg = PolynomialFeatures(degree = 3)
x_poly3 = poly_reg.fit_transform(x_train)
Lin_reg_3 = LinearRegression()
Lin_reg_3.fit(x_poly3,y_train)

x_poly3_val3 = poly_reg.fit_transform(x_val)

print('Degree 3 trainig error: ', Lin_reg_3.score(x_poly3,y_train))
print('Degree 3 validation error: ', Lin_reg_3.score(x_poly3_val3,y_val))

plt.scatter (x_val,y_val , color ='Red')
plt.plot (x_val, Lin_reg_1.predict(x_val),color = 'Blue')

x2,y2 = zip(*sorted(zip(x_val,Lin_reg_2.predict(x_poly2_val2)),key = lambda x:x[0]))
plt.plot(x2,y2,color='green')

x3,y3 = zip(*sorted(zip(x_val,Lin_reg_3.predict(x_poly3_val3)),key = lambda x:x[0]))
plt.plot(x3,y3,color='black')

plt.show()